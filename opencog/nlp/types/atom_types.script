//
// Script for automatic "atom type" generation. For more information,
// consult the README at
// https://github.com/opencog/atomspace/tree/master/opencog/atoms/atom_types
//
// ====================================================================
//
// WordNodes are lexical, because we'll be using them to look up
// information in a table.
WORD_NODE <- ITEM_NODE
WORD_CLASS_NODE <- ITEM_CLASS_NODE  // A signifier of a set of words

REFERENCE_LINK <- ORDERED_LINK

// Custom atoms to identify documents, sentences, word instances.
// Perhaps some of thesem should be ITEM_NODE ?
PHRASE_NODE <- ITEM_NODE
PARSE_NODE <- NODE
WORD_INSTANCE_NODE <- NODE
WORD_INSTANCE_LINK <- ASSOCIATIVE_LINK

// Sentences and documents are observed.  Use these with
// GreaterThanLink to find out what order things came in.
SEQUENCE_LINK <- ASSOCIATIVE_LINK
WORD_SEQUENCE_LINK <- SEQUENCE_LINK

// ---------------------------------------------------------------
// Link Grammar dictionary types.
// See
// https://github.com/opencog/link-grammar/blob/master/viterbi/README
// for details on what these mean. These are currently used in the
// sureal codebase.
//
// Dictionary. Holds a reference to an LG Dictionary.
LG_DICT_NODE <- NODE

// Evaluates to true, if the word is in the LG dictionary
LG_HAVE_DICT_ENTRY <- CRISP_OUTPUT_LINK

// Looks up a single word in the LG dictionary
LG_DICT_ENTRY <- FUNCTION_LINK

// Parser - parses sentences.
LG_PARSE_LINK <- FUNCTION_LINK
LG_PARSE_MINIMAL <- LG_PARSE_LINK
LG_PARSE_DISJUNCTS <- LG_PARSE_LINK
LG_PARSE_SECTIONS <- LG_PARSE_LINK
LG_PARSE_BONDS <- LG_PARSE_LINK

// Connector: same meaning and syntax as in link-grammar, except that
// the direction and the multi-connector parts get distinct types.
LG_CONN_NODE <- LEXICAL_NODE   // e.g. "MX"
LG_CONN_MULTI_NODE <- LEXICAL_NODE  // multi-connector "@"
LG_CONN_DIR_NODE <- SEX_NODE  // e.g. "+"

// Consists of the connector node, the direction, and possibly the
// multi-connector node.
LG_CONNECTOR <- CONNECTOR   // e.g. "MX+"

// These vaguely resemble AND_LINK and OR_LINK, but DO NOT BE FOOLED!
// They are not really the same, as they are not boolean; rather they
// behave like "linear logic" operators.  In particular, LG_OR is an
// exclusive-OR disjunction (only one choice can be picked).
// Thus, we create brand-new types here, to avoid having to re-cycle
// AND_LINK, OR_LINK with different, conflicting meanings.
//
LG_SEQ <- LIST_LINK   // Just an ordered sequence, without other semantics.
LG_AND <- LG_SEQ      // must be ordered! (like SEQUNTIAL_AND_LINK)
LG_OR  <- OR_LINK     // Exclusive-OR, completely disjunctive.

// Kind-of-like an EvaluationLink but different.
// First atom must be a WordNode or WordInstanceNode.
// Second atom must be a "connector set": that is, a collection of
// LgConnectors, joined with LgOr, LgAnd links.
// Ideally, these are fully disjoined before use.
// In the case of WordInstanceNode, it should always be a
// LgAnd disjunct used in the corresponding sentence.
LG_WORD_CSET <- CONNECTOR_SEQ
LG_DISJUNCT <- SECTION

// This is NOT a connector, its a pair of connected connectors.
LG_LINK_NODE <- BOND_NODE   // e.g. "MX"

// For LG link instance of a specific parse of a sentence
// LgLinkInstanceNode will be an instance of LgLinkNode
// and LgLinkInstanceLink will link the node to the original connectors
LG_LINK_INSTANCE_NODE <- LG_LINK_NODE
LG_LINK_INSTANCE_LINK <- LIST_LINK

// ------------------------- END OF FILE -------------------
